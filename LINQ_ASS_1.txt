1. Create a structure 
struct Books 
   private string title;
   private string author;
   private string subject;
   private int book_id;
Include 2 methods called GetValues() and ShowValues() to accept and display details.

create a Class called TestStructures that invokes the above methods of the structure to accept and display the details of the book

-->
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LINQ_ASS_1
{
    public struct Books
    {
        private string title;
        private string author;
        private string subject;
        private int book_id;

        public void GetValues()
        {
            Console.Write("Enter Book Title : ");
            title = Console.ReadLine();
            Console.Write("Enter Author name : ");
            author = Console.ReadLine();
            Console.Write("Enter Subject Name : ");
            subject = Console.ReadLine();
            Console.Write("Enter Book Id : ");
            book_id = int.Parse(Console.ReadLine());
        }
        public void ShowValues()
        {
            Console.WriteLine($"Book Title : "+ this.title);
            Console.WriteLine($"Author Name : "+this.author);
            Console.WriteLine($"Subject Name : "+this.subject);
            Console.WriteLine($"Book Id : "+this.book_id);
        }
    }

    internal class TestStructures
    {
        static void Main(string[] args)
        {
            Books b = new Books();
            b.GetValues();
            b.ShowValues();
            Console.ReadLine();
        }
    }
}

2. Create a Class called Products with Productid, Product Name, Price. Accept 10 Products, sort them based on the price, and display the sorted Products

-->
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LINQ_ASS_1
{
	class Products
	{
        int Productid, Price;
        string ProductName;

        static void Main()
        {
            List<Products> products = new List<Products>();
            Console.WriteLine("Enter details of 10 Products");
            for(int i = 0; i < 10; i++)
            {
                Console.Write("Enter Product ID: ");
                int pid = int.Parse(Console.ReadLine());
                Console.Write("Enter Product Name: ");
                string pname = Console.ReadLine();
                Console.Write("Enter Product Price: ");
                int pprice = Convert.ToInt32(Console.ReadLine());
                products.Add(new Products { Productid = pid, ProductName = pname, Price = pprice });
                Console.WriteLine();
            }
            var sortedproducts = products.OrderBy(o => o.Price);
            foreach(Products p in sortedproducts)
            {
                Console.WriteLine(
                    $"Product ID: {p.Productid} | " +
                    $"Product Name: {p.ProductName} | " +
                    $"Product Price: {p.Price}");
            }
            Console.ReadLine();
        }
	}
}

3. Create a simple Stationery application to add items and display added items using Generic List collections
-->
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LINQ_ASS_1
{
	class Stationary
	{
        string itemName;
        double itemPrice;

        List<Stationary> items = new List<Stationary>();

        public void AddItem()
        {
            Console.Write("Enter Item Name: ");
            string i_name = Console.ReadLine();
            Console.Write("Enter Item Price: ");
            int i_price = int.Parse(Console.ReadLine());
            items.Add(new Stationary { itemName = i_name, itemPrice = i_price});
            Console.WriteLine("Item Added Successfully\n");
        }

        public void DisplayItem()
        {
            Console.WriteLine("-------------Products---------------------");
            foreach(Stationary s in items)
            {
                Console.WriteLine($"Item Name: {s.itemName} | Item Price: {s.itemPrice}");
            }
        }

        static void Main()
        {
            Stationary s = new Stationary();
            while (true)
            {
                Console.WriteLine("1. Add Item");
                Console.WriteLine("2. Display Items");
                Console.WriteLine("3. Exit");
                Console.Write("Enter Your Choice: ");
                int choice = int.Parse(Console.ReadLine());
                switch (choice)
                {
                    case 1:
                        s.AddItem();
                        break;
                    case 2:
                        s.DisplayItem();
                        break;
                    case 3:
                        Environment.Exit(0);
                        break;
                    default:
                        Console.WriteLine("Invalid Choice!! Try Again");
                        break;
                }
            }
        }
}

-------------------------------------------------------------------------------------------------------

LINQ  :

1. Create a console application and add class named Employee with following field.
Employee Class
EmployeeID (Integer)
FirstName (String)
LastName (String)
Title (String)
DOB (Date)
DOJ (Date)
City (String)

-->

2. Create a Generic List Collection empList and populate it with the following records.

EmployeeID 	FirstName	   LastName 		Title 		DOB 			DOJ 			City
1001		Malcolm  	   Daruwalla 	 	Manager 	16/11/1984 		8/6/2011 		Mumbai
1002 		Asdin	     	   Dhalla 		AsstManager 	20/08/1984 		7/7/2012 		Mumbai
1003 		Madhavi 	   Oza 		        Consultant 	14/11/1987 		12/4/2015	 	Pune
1004 		Saba 		   Shaikh		SE 		3/6/1990	 	2/2/2016	 	Pune
1005 		Nazia 		   Shaikh 		SE 		8/3/1991 		2/2/2016	 	Mumbai
1006 		Amit 		   Pathak 		Consultant 	7/11/1989 		8/8/2014 		Chennai
1007 		Vijay 		   Natrajan	 	Consultant 	2/12/1989	 	1/6/2015 		Mumbai
1008 		Rahul 		   Dubey 		Associate	11/11/1993 		6/11/2014	 	Chennai
1009 		Suresh 		   Mistry		Associate 	12/8/1992 		3/12/2014	 	Chennai
1010 		Sumit 		   Shah 		Manager 	12/4/1991 		2/1/2016 		Pune

3. Now once the collection is created write down and execute the LINQ queries for collection 
as follows :

a. Display detail of all the employee
b. Display details of all the employee whose location is not Mumbai
c. Display details of all the employee whose title is AsstManager
d. Display details of all the employee whose Last Name start with S
e. Display a list of all the employee who have joined before 1/1/2015
f. Display a list of all the employee whose date of birth is after 1/1/1990
g. Display a list of all the employee whose designation is Consultant and Associate
h. Display total number of employees
i. Display total number of employees belonging to “Chennai”
j. Display highest employee id from the list
k. Display total number of employee who have joined after 1/1/2015
l. Display total number of employee whose designation is not “Associate”
m. Display total number of employee based on City
n. Display total number of employee based on city and title
o. Display total number of employee who is youngest in the list

-->

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LINQ_ASS_1
{
    class Employee
    {
        public int EmployeeID;
        public string FirstName, LastName, Title, City;
        public DateTime DOB, DOJ;

        static void Main()
        {
            List<Employee> empList = new List<Employee>
            {
                new Employee{EmployeeID = 1001, FirstName = "Malcolm", LastName = "Daruwalla", Title = "Manager", DOB = DateTime.Parse("16/11/1984"), DOJ = DateTime.Parse("08/06/2011"), City = "Mumbai" },
                new Employee{EmployeeID = 1002, FirstName = "Asdin", LastName = "Dhalia", Title = "AsstManager", DOB = DateTime.Parse("20/08/1984"), DOJ = DateTime.Parse("07/07/2012"), City = "Mumbai" },
                new Employee{EmployeeID = 1003, FirstName = "Madhavi", LastName = "Oza", Title = "Consultant", DOB = DateTime.Parse("14/11/1987"), DOJ = DateTime.Parse("12/04/2015"), City = "Pune" },
                new Employee{EmployeeID = 1004, FirstName = "Saba", LastName = "Shaikh", Title = "SE", DOB = DateTime.Parse("03/06/1990"), DOJ = DateTime.Parse("02/02/2016"), City = "Pune" },
                new Employee{EmployeeID = 1005, FirstName = "Nazia", LastName = "Shaikh", Title = "SE", DOB = DateTime.Parse("08/03/1991"), DOJ = DateTime.Parse("02/02/2016"), City = "Mumbai" },
                new Employee{EmployeeID = 1006, FirstName = "Amit", LastName = "Pathak", Title = "Consultant", DOB = DateTime.Parse("07/11/1989"), DOJ = DateTime.Parse("08/08/2014"), City = "Chennai" },
                new Employee{EmployeeID = 1007, FirstName = "Vijay", LastName = "Natrajan", Title = "Consultant", DOB = DateTime.Parse("02/12/1989"), DOJ = DateTime.Parse("01/06/2015"), City = "Mumbai" },
                new Employee{EmployeeID = 1008, FirstName = "Rahul", LastName = "Dubey", Title = "Associate", DOB = DateTime.Parse("11/11/1993"), DOJ = DateTime.Parse("06/11/2014"), City = "Chennai" },
                new Employee{EmployeeID = 1009, FirstName = "Suresh", LastName = "Mistry", Title = "Associate", DOB = DateTime.Parse("12/08/1992"), DOJ = DateTime.Parse("03/12/2014"), City = "Chennai" },
                new Employee{EmployeeID = 1010, FirstName = "Sumit", LastName = "Shah", Title = "Manager", DOB = DateTime.Parse("12/04/1991"), DOJ = DateTime.Parse("02/01/2016"), City = "Pune" }
            };

            //a. Display detail of all the employee
            var empdetail = from emp in empList select emp;
            Console.WriteLine("------------------------------------------");
            foreach (Employee e in empdetail)
            {
                Console.WriteLine("Employee ID: {0} | First Name: {1} | Last Name: {2} | Title: {3} | Date of Birth: {4} | Date of Joining: {5} | City: {6}", e.EmployeeID, e.FirstName, e.LastName, e.Title, e.DOB.ToString("dd-MM-yyyy"), e.DOJ.ToString("dd-MM-yyyy"), e.City);
            }

            //b. Display details of all the employee whose location is not Mumbai
            var notmumbai = from emp in empList where emp.City != "Mumbai" select emp;
            Console.WriteLine("------------------------------------------");
            foreach (Employee e in notmumbai)
            {
                Console.WriteLine("Employee ID: {0} | First Name: {1} | Last Name: {2} | Title: {3} | Date of Birth: {4} | Date of Joining: {5} | City: {6}", e.EmployeeID, e.FirstName, e.LastName, e.Title, e.DOB.ToString("dd-MM-yyyy"), e.DOJ.ToString("dd-MM-yyyy"), e.City);
            }

            //c. Display details of all the employee whose title is AsstManager
            var asstmngr = from emp in empList where emp.Title == "AsstManager" select emp;
            Console.WriteLine("------------------------------------------");
            foreach (Employee e in asstmngr)
            {
                Console.WriteLine("Employee ID: {0} | First Name: {1} | Last Name: {2} | Title: {3} | Date of Birth: {4} | Date of Joining: {5} | City: {6}", e.EmployeeID, e.FirstName, e.LastName, e.Title, e.DOB.ToString("dd-MM-yyyy"), e.DOJ.ToString("dd-MM-yyyy"), e.City);
            }

            //d. Display details of all the employee whose Last Name start with S
            var lstnmeS = from emp in empList where emp.LastName.StartsWith("S") select emp;
            Console.WriteLine("------------------------------------------");
            foreach (Employee e in lstnmeS)
            {
                Console.WriteLine("Employee ID: {0} | First Name: {1} | Last Name: {2} | Title: {3} | Date of Birth: {4} | Date of Joining: {5} | City: {6}", e.EmployeeID, e.FirstName, e.LastName, e.Title, e.DOB.ToString("dd-MM-yyyy"), e.DOJ.ToString("dd-MM-yyyy"), e.City);
            }

            //e. Display a list of all the employee who have joined before 1/1/2015
            var joinedbefore = from emp in empList where emp.DOJ < DateTime.Parse("01/01/2015") select emp;
            Console.WriteLine("------------------------------------------");
            foreach (Employee e in joinedbefore)
            {
                Console.WriteLine("Employee ID: {0} | First Name: {1} | Last Name: {2} | Title: {3} | Date of Birth: {4} | Date of Joining: {5} | City: {6}", e.EmployeeID, e.FirstName, e.LastName, e.Title, e.DOB.ToString("dd-MM-yyyy"), e.DOJ.ToString("dd-MM-yyyy"), e.City);
            }

            //f. Display a list of all the employee whose date of birth is after 1/1/1990
            var dobafter = from emp in empList where emp.DOB > DateTime.Parse("01/01/1990") select emp;
            Console.WriteLine("------------------------------------------");
            foreach (Employee e in dobafter)
            {
                Console.WriteLine("Employee ID: {0} | First Name: {1} | Last Name: {2} | Title: {3} | Date of Birth: {4} | Date of Joining: {5} | City: {6}", e.EmployeeID, e.FirstName, e.LastName, e.Title, e.DOB.ToString("dd-MM-yyyy"), e.DOJ.ToString("dd-MM-yyyy"), e.City);
            }

            //g. Display a list of all the employee whose designation is Consultant and Associate
            var designation = from emp in empList where emp.Title == "Consultant" || emp.Title == "Associate" select emp;
            Console.WriteLine("------------------------------------------");
            foreach (Employee e in designation)
            {
                Console.WriteLine("Employee ID: {0} | First Name: {1} | Last Name: {2} | Title: {3} | Date of Birth: {4} | Date of Joining: {5} | City: {6}", e.EmployeeID, e.FirstName, e.LastName, e.Title, e.DOB.ToString("dd-MM-yyyy"), e.DOJ.ToString("dd-MM-yyyy"), e.City);
            }

            //h. Display total number of employees
            var totalemp = from emp in empList select emp;
            Console.WriteLine("------------------------------------------");
            Console.WriteLine($"Total Employees: {totalemp.Count()}");

            //i. Display total number of employees belonging to “Chennai”
            var empchennai = from emp in empList where emp.City == "Chennai" select emp;
            Console.WriteLine("------------------------------------------");
            Console.WriteLine("Number of Employees from Chennai: " + empchennai.Count());

            //j. Display highest employee id from the list
            Console.WriteLine("------------------------------------------");
            Console.WriteLine(empList.Max(m => m.EmployeeID));

            //k. Display total number of employee who have joined after 1/1/2015
            var empafter = from emp in empList where emp.DOJ > DateTime.Parse("01/01/2015") select emp;
            Console.WriteLine("------------------------------------------");
            Console.WriteLine("Number of employees joined after 01/01/2015: {0}", empafter.Count());

            //l. Display total number of employee whose designation is not “Associate”
            var notassociate = from emp in empList where emp.Title != "Associate" select emp;
            Console.WriteLine("------------------------------------------");
            Console.WriteLine($"Count of Employees other than Associate: {notassociate.Count()}");

            //m. Display total number of employee based on City
            var city = from emp in empList.GroupBy(c => c.City) select new { cname = emp.First().City, cemp = emp.Count() };
            Console.WriteLine("------------------------------------------");
            foreach (var c in city)
            {
                Console.WriteLine($"City: {c.cname}\tEmployee Count: {c.cemp}");
            }

            //n. Display total number of employee based on city and title
            var cityntitle = from emp in empList.GroupBy(c => c.Title) select new { cname = emp.First().City, ctitle = emp.First().Title, cemp = emp.Count() };
            Console.WriteLine("------------------------------------------");
            foreach (var v in cityntitle)
            {
                Console.WriteLine($"City: {v.cname}\tTitle: {v.ctitle}\tEmployee Count: {v.cemp}");
            }

            //o. Display total number of employee who is youngest in the list
            Console.WriteLine("------------------------------------------");
            var youngest = empList.OrderBy(y => y.DOB).Last();
            Console.WriteLine($"Youngest Employee: {youngest.FirstName} {youngest.LastName}");
            Console.Read();
        }
    }
}